AWSTemplateFormatVersion: 2010-09-09
Description: >-
  IAM-challenge Brahim Benalia

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Environment:
      Variables:
        TABLE: !Ref PostsTable

Parameters:
  Stage:
    Type: String
    Default: stg

Resources:
  postsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          MyCognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  getAllPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-posts.getAllPostsHandler
      Description: Lambda function to get all posts from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref postsApi
            Auth:
              Authorizer: NONE
            Path: /posts
            Method: GET

  createPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-post.createPostHandler
      Description: Lambda function to create a post.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Environment:
        Variables:
          TABLE: !Ref PostsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref postsApi
            Path: /post
            Method: POST

  updatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-post.updatePostHandler
      Description: Lambda to update a post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Environment:
        Variables:
          TABLE: !Ref PostsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref postsApi
            Path: /post/{id}
            Method: PATCH

  deletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-post.deletePostHandler
      Description: Lambda to delete a post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Environment:
        Variables:
          TABLE: !Ref PostsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref postsApi
            Path: /post/{id}
            Method: DELETE

  PostsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: iam_challenge_cognito_user_pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: iam_challenge_cognito_client
      UserPoolId: !Ref MyCognitoUserPool
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - https://iamchallenge.com/callback
      LogoutURLs:
        - https://iamchallenge.com/signout

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      Domain: !Sub ${postsApi}-${Stage}

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt MyCognitoUserPool.Arn

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${postsApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
